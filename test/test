package main

import (
	"encoding/json"
	"fmt"
	"log"
	"math/rand"
	"net/http"
	"net/http/httptest"
	"os"
	"testing"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/stretchr/testify/assert"

	"hoyang/ownsa/database"
	"hoyang/ownsa/middleware"

	"hoyang/ownsa/router"
	"hoyang/ownsa/utils"

	"hoyang/ownsa/repository"
)

// 处理 http 请求
func TestPeopleDepartControl(t *testing.T) {
	// 设置 gin 为测试模式
	gin.SetMode(gin.TestMode)

	// 初始化测试环境（根据需要初始化数据库、mock数据等）
	confEnv := utils.GetEnvConf()
	logger := utils.NewLogger()
	database.SetupDatabase(&confEnv, logger)

	// 创建 gin.Engine 实例并注册路由
	engine := gin.New()
	engine.Use(gin.LoggerWithWriter(logger.Writer()))
	engine.Use(gin.CustomRecovery(middleware.ErrorHandler))
	router.SetupRouter(engine)
	router.CreateWebController()
	router.RegisterPeopleRoutes(&confEnv, engine, router.WebController.PeopleController)
	// 模拟请求 /api/people GET 方法来测试 FindAll
	w := httptest.NewRecorder()
	req, _ := http.NewRequest("GET", "/api/people", nil)
	// 如果需要鉴权，可以在 header 中加入 Token，如：
	// req.Header.Set("Authorization", "Bearer your_test_jwt_token")

	engine.ServeHTTP(w, req)

	// 断言状态码为 200
	assert.Equal(t, http.StatusOK, w.Code)

	// 根据你的返回数据结构进行断言
	// 假设 /api/people 返回结构如下:
	// {
	//    "code": 200,
	//    "success": true,
	//    "data": [
	//        { "id": 1, "name": "John Doe" },
	//        ...
	//    ]
	// }
	var resp map[string]interface{}
	err := json.Unmarshal(w.Body.Bytes(), &resp)
	assert.NoError(t, err)

	// 验证返回的 code 和 success 字段
	assert.Equal(t, float64(200), resp["code"])
	assert.Equal(t, true, resp["success"])

	// 验证 data 是一个 slice
	data, ok := resp["data"].([]interface{})
	assert.True(t, ok, "data 字段应该是一个数组")
	// 如果有期望至少返回1条数据，可以进一步断言 data 的长度和内容
	// assert.NotEmpty(t, data)
	if len(data) > 0 {
		firstPerson := data[0].(map[string]interface{})
		assert.Equal(t, float64(1), firstPerson["id"])
		assert.Equal(t, "John Doe", firstPerson["name"])
	}
	// 至此，已验证接口基本可用性，你可以根据实际业务需求继续添加更多断言。
}

// TestInsertEventMessageData 测试插入 100 条测试数据
func TestInsertEventMessageData(t *testing.T) {
	// 连接数据库
	confEnv := utils.GetEnvConf()
	logger := log.New(os.Stdout, "\r\n", log.LstdFlags)
	database.SetupDatabase(&confEnv, logger)

	// 准备随机数据
	EventMessageData := repository.NewEventMessageDataRepositoryImpl(database.DB.DbCredential)
	var data []EventMessageData
	rand.Seed(time.Now().UnixNano())
	for i := 1; i <= 100; i++ {
		accessTime := fmt.Sprintf("2024-12-23 %02d:%02d:%02d", rand.Intn(24), rand.Intn(60), rand.Intn(60))
		data = append(data, EventMessageData{
			MsgId:           uint(i),
			AccessTime:      accessTime,
			IBName:          fmt.Sprintf("Module-%d", rand.Intn(10)+1),
			ReaderName:      fmt.Sprintf("Door-%d", rand.Intn(5)+1),
			PeopleCode:      fmt.Sprintf("P%03d", rand.Intn(1000)),
			PeopleFirstName: fmt.Sprintf("First%d", rand.Intn(100)),
			PeopleLastName:  fmt.Sprintf("Last%d", rand.Intn(100)),
			PeopleDepart:    fmt.Sprintf("Depart%d", rand.Intn(5)+1),
			CardNo:          fmt.Sprintf("C%010d", rand.Intn(1000000000)),
			Wiegand:         uint(rand.Intn(1000)),
			UniqueId:        uint(rand.Intn(1000)),
			PeopleId:        uint(rand.Intn(1000)),
			Content:         uint(rand.Intn(1000)),
			EventType:       uint(rand.Intn(10)),
			IBAddr:          rand.Intn(256),
			ReaderAddr:      rand.Intn(256),
			InputAddr:       rand.Intn(256),
			OutputAddr:      rand.Intn(256),
			FullName:        fmt.Sprintf("First%d Last%d", rand.Intn(100), rand.Intn(100)),
		})
	}

	// 插入数据
	if err := db.Create(&data).Error; err != nil {
		t.Fatalf("Failed to insert data: %v", err)
	}

	t.Logf("Successfully inserted 100 rows of test data into table 'event_message_data'")
}
